import os
import tkinter as tk
from tkinter import messagebox, simpledialog, ttk
from tkcalendar import Calendar
from datetime import datetime

TODO_FILE = "todo.txt"

def load_tasks():
    """Load tasks from the file."""
    if not os.path.exists(TODO_FILE):
        return []
    with open(TODO_FILE, "r") as file:
        tasks = []
        priority_map = {"Low": 1, "Medium": 2, "High": 3}
        for line in file.readlines():
            parts = line.strip().split(" | ")
            if len(parts) == 3:
                task, due_date, emergency_level = parts
                tasks.append((task, due_date, emergency_level))
        return sorted(tasks, key=lambda x: (datetime.strptime(x[1], "%m-%d-%Y"), -priority_map[x[2]]))

def save_tasks(tasks):
    """Save tasks to the file."""
    with open(TODO_FILE, "w") as file:
        for task, due_date, emergency_level in tasks:
            file.write(f"{task} | {due_date} | {emergency_level}\n")

def open_calendar():
    """Open a calendar widget to select a due date."""
    top = tk.Toplevel(root)
    top.title("Select Due Date")
    cal = Calendar(top, date_pattern='mm-dd-yyyy')
    cal.pack(pady=20)
    
    def set_date():
        global selected_date
        selected_date = cal.get_date()
        top.destroy()
    
    tk.Button(top, text="Select", command=set_date).pack(pady=10)

def add_task():
    """Add a new task."""
    global selected_date
    selected_date = None
    
    task = simpledialog.askstring("New Task", "Enter task:")
    if not task:
        return
    
    open_calendar()
    root.wait_window()  # Wait for the user to select a date
    
    if not selected_date:
        return
    
    priority_window = tk.Toplevel(root)
    priority_window.title("Select Priority")
    
    tk.Label(priority_window, text="Select Emergency Level:").pack(pady=5)
    priority_var = tk.StringVar()
    priority_var.set("Medium")
    priority_dropdown = ttk.Combobox(priority_window, textvariable=priority_var, values=["Low", "Medium", "High"])
    priority_dropdown.pack(pady=5)
    
    def confirm_priority():
        global selected_priority
        selected_priority = priority_var.get()
        priority_window.destroy()
    
    tk.Button(priority_window, text="Select", command=confirm_priority).pack(pady=5)
    root.wait_window(priority_window)
    
    tasks = load_tasks()
    tasks.append((task, selected_date, selected_priority))
    tasks = sorted(tasks, key=lambda x: (datetime.strptime(x[1], "%m-%d-%Y"), {"Low": -1, "Medium": -2, "High": -3}[x[2]]))
    save_tasks(tasks)
    refresh_task_list()

def remove_task():
    """Remove selected task."""
    selected_index = task_listbox.curselection()
    if not selected_index:
        messagebox.showwarning("Warning", "No task selected.")
        return
    index = selected_index[0]
    tasks = load_tasks()
    tasks.pop(index)
    save_tasks(tasks)
    refresh_task_list()

def refresh_task_list():
    """Refresh the displayed task list."""
    task_listbox.delete(0, tk.END)
    tasks = load_tasks()
    for task, due_date, emergency_level in tasks:
        task_listbox.insert(tk.END, f"{task} (Due: {due_date}, Priority: {emergency_level})")

# GUI Setup
root = tk.Tk()
root.title("TODO App")
root.geometry("400x300")

task_listbox = tk.Listbox(root, width=50, height=10)
task_listbox.pack(pady=10)

btn_add = tk.Button(root, text="Add Task", command=add_task)
btn_add.pack(pady=5)

btn_remove = tk.Button(root, text="Remove Task", command=remove_task)
btn_remove.pack(pady=5)

btn_exit = tk.Button(root, text="Exit", command=root.quit)
btn_exit.pack(pady=5)

refresh_task_list()

root.mainloop()
